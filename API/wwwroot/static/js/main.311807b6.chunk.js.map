{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/ActivityAttendee.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","app/features/user/LoginForm.tsx","app/features/errors/ValidationErrors.tsx","app/features/user/RegisterForm.tsx","app/features/home/HomePage.tsx","app/features/profiles/FollowButton.tsx","app/features/profiles/ProfileCard.tsx","app/features/activities/dashbord/ActivivtyListItemAttendee.tsx","app/features/activities/dashbord/ActivityListItem.tsx","app/features/activities/dashbord/ActivityLits.tsx","app/features/activities/dashbord/ActivityFilter.tsx","app/features/activities/dashbord/ActivityListItemPlaceholder.tsx","app/features/activities/dashbord/ActivitiesDashbord.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/form/options/category.ts","app/common/form/MyDatePicker.tsx","app/features/activities/dashbord/form/ActivityForm.tsx","app/features/activities/dashbord/details/ActivityDetailedHeader.tsx","app/features/activities/dashbord/details/ActivityDetailedInfo.tsx","app/features/activities/dashbord/details/ActivityDeatailedChat.tsx","app/features/activities/dashbord/details/ActiviytyDeatailedSidebar.tsx","app/features/activities/dashbord/details/ActivityDetails.tsx","app/features/errors/TestError.tsx","app/features/errors/NotFound.tsx","app/features/errors/ServerError.tsx","app/common/form/modals/ModalContainer.tsx","app/models/user.ts","app/features/profiles/ProfileAbout.tsx","app/features/profiles/ProfileAcitivities.tsx","app/features/profiles/ProfileFollowings.tsx","app/common/ImageUpload/PhotoWidgetCropper.tsx","app/common/ImageUpload/PhotoWidgetDropzone.tsx","app/common/ImageUpload/PhotoUploadWidget.tsx","app/features/profiles/ProfilePhotos.tsx","app/features/profiles/ProfileContent.tsx","app/features/profiles/ProfileHeader.tsx","app/features/profiles/ProfilePage.tsx","app/layout/PriveRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","pageNumnber","axios","defaults","baseURL","process","responceBody","response","interceptors","request","use","config","store","commonStore","jwt","headers","Authorization","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","attend","Account","current","login","user","register","Profiles","userName","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletPhoto","updateDetails","udateFolowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","date","description","city","venue","category","Profile","displayName","image","ActivityStore","activitiesRegestry","Map","selectedActivity","edtitMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","activitiesGroupedByDate","dict","activitiesByDate","reduce","activities","format","entries","Array","from","values","sort","b","getTime","loadActivities","setLoadingInitial","axiosParams","paginatedResult","act","setActivity","setPagination","console","log","loadActivity","runInAction","getActivity","Date","isHost","userStore","hostUserName","isGoing","attendees","some","x","host","find","createActivity","activityFormValues","newActivity","attendee","updateActivity","updatedActivity","filter","deleteActivity","toggleActivityCanceled","isCanceled","clearSeectedActivity","updateAttendeeFolowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","ProfileStore","profile","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","loadUserActivities","acticvities","setActiveTab","loadProfile","photo","photos","isMain","setImage","setMianPhoto","p","deletePhoto","bio","setDisplayName","updateFolowing","activityStore","followingCount","f","loadFollowing","follwings","UserStore","logIn","logedInUser","setJwt","token","modalStore","closeModal","getUser","logout","window","localStorage","removeItem","getItem","appLoadet","setAppLoaded","setItem","modal","open","content","openModal","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComment","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","onClick","icon","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","color","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","Header","placeholder","type","render","marginBotom","fluid","ValidationError","Message","negative","List","map","err","i","backendValidationErrors","errorResponce","validationSchema","Yup","required","isValid","dirty","disabled","Segment","textAlign","vertical","size","isLoggedIn","Reveal","animated","Content","visible","width","hidden","e","preventDefault","handleFollow","ProfileCard","Card","Description","str","length","substring","truncate","extra","Icon","styles","borderColor","borderWidth","horizontal","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Group","attached","stile","secondary","ActivivtyListItemAttendee","clearing","floated","group","sub","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","ActivityFilter","Loader","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categroyOptions","MyDateInput","selected","useHistory","useParams","nullable","uuid","enableReinitialize","onFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","ad","message","Modal","onClose","ProfilesAboutFormValues","isCurrentUser","isInEditMode","setIsInEditMode","formValues","setFormValues","Tab","Pane","handleFormSubmit","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","previe","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","ProfileAcitivities","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivitiesDashbord","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.311807b6.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number,\r\n    itemsPerPage: number,\r\n    totalItems: number;\r\n    totalPages: number\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination)\r\n    {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n\r\n    pageNumnber ;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2){\r\n        this.pageNumnber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios'\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { Photo, Profile, UserActivity } from '../models/ActivityAttendee';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport User, { ProfilesAboutFormValues, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => setTimeout(resolve, delay));\r\n}\r\n\r\nconst responceBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\naxios.interceptors.request.use(config => {\r\n    if(store.commonStore.jwt)\r\n        config.headers.Authorization = `Bearer ${store.commonStore.jwt}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development')\r\n        await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if(pagination){\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;}\r\n    return response;    \r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch(status){\r\n        case 400:\r\n            if(typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if(config.method ==='get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if(data.errors)\r\n            {\r\n                const modalStateErrors=[];\r\n                for(const key in data.errors) {\r\n                    if(data.errors[key]){\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat()\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found')\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n} )\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responceBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responceBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responceBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responceBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(responceBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post('/activities', activity),\r\n    put: (activity: ActivityFormValues) => requests.put(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del(`/activities/${id}`),\r\n    attend: (id: string) => requests.post(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account ={\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (userName: string) => requests.get<Profile>(`/profiles/${userName}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {headers:{'Content-type': 'multipart/form-data'}})\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletPhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateDetails:(data: ProfilesAboutFormValues) => requests.put(`/profiles`, data),\r\n    udateFolowing: (userName: string ) => requests.post(`/follow/${userName}`, {}),\r\n    listFollowings: (userName: string, predicate: string)=> requests.get<Profile[]>(`/follow/${userName}?predicate=${predicate}`),\r\n    listActivities: (userName: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${userName}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles,\r\n}\r\n\r\nexport default agent;","import { act } from \"@testing-library/react\";\r\nimport {Profile} from \"./ActivityAttendee\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    isCanceled: boolean;\r\n    attendees: Profile[];\r\n    hostUserName: string;\r\n    isHost: boolean;\r\n    isGoing: boolean;\r\n    host?: Profile;\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id? :string = undefined;\r\n    title : string = '';\r\n    date: Date | null = null;\r\n    description: string = '';\r\n    city: string = '';\r\n    venue: string = '';\r\n    category: string = '';\r\n    constructor(activity? : ActivityFormValues) {\r\n        if(activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.date = activity.date;\r\n            this.description = activity.description;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n            this.category =activity.category\r\n        }\r\n    }\r\n}","import User from \"./user\";\r\n\r\nexport interface Profile {\r\n    userName: string,\r\n    bio?: string,\r\n    displayName: string,\r\n    image?: string\r\n    followersCount: number,\r\n    followingCount: number,\r\n    following: boolean,\r\n    photos? : Photo[]\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.userName = user.userName;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string,\r\n    url: string,\r\n    isMain: boolean\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\"\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\"\r\nimport {format} from 'date-fns'\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/ActivityAttendee\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activitiesRegestry: Map<string, Activity> = new Map<string, Activity>()\r\n    selectedActivity: Activity | undefined = undefined;\r\n    edtitMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination| null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n        reaction( () => this.predicate.keys(), \r\n        () => {\r\n            this.pagingParams = new PagingParams();\r\n            this.activitiesRegestry.clear();\r\n            this.loadActivities();\r\n        })\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    get axiosParams () {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumnber.toString())\r\n        params.append('pageSize', this.pagingParams.pageSize.toString())\r\n        this.predicate.forEach((value, key) => {\r\n            if(key === 'startDate')\r\n                params.append(key, (value as Date).toISOString())\r\n            else\r\n                params.append(key, value);\r\n        })\r\n        return params;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date)  => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if(key !== 'startDate')\r\n                    this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch(predicate) {\r\n            case 'all': \r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing': \r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost': \r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate': \r\n                this.predicate.delete('startDate')\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    activitiesGroupedByDate = () => {\r\n        const dict = this.activitiesByDate().reduce((activities, activity) => {\r\n            const date = format(activity.date!, 'dd MMM yyyy');\r\n            activities[date] = activities[date]? [...activities[date], activity]: [activity];\r\n            return activities;\r\n        }, {} as {[key: string]: Activity[]})\r\n        return Object.entries(dict);\r\n    }\r\n\r\n    activitiesByDate = () => {\r\n        return Array.from(this.activitiesRegestry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime())\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.setLoadingInitial(true);\r\n        try {\r\n            const paginatedResult = await agent.Activities.list(this.axiosParams);\r\n            paginatedResult.data.forEach((act) => {\r\n                this.setActivity(act);\r\n            });\r\n            this.setPagination(paginatedResult.pagination)\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) =>{\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.activitiesRegestry.get(id)\r\n        if(activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }else{\r\n            this.setLoadingInitial(true);\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity!);\r\n                runInAction(()=>{\r\n                    this.selectedActivity = activity;\r\n                })\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n            finally{\r\n                this.setLoadingInitial(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activitiesRegestry.get(id);\r\n    }\r\n\r\n    private setActivity = (act: Activity) => {\r\n        act.date = new Date(act.date!);\r\n        act.isHost = store.userStore.user?.userName === act.hostUserName;\r\n        act.isGoing = act.attendees?.some(x => x.userName === store.userStore.user?.userName);\r\n        act.host=act.attendees?.find(x => x.userName == act.hostUserName); \r\n        this.activitiesRegestry.set(act.id, act);\r\n    }\r\n\r\n    setLoadingInitial = (value: boolean) => {\r\n        this.loadingInitial = value;\r\n    }\r\n\r\n    createActivity = async (activityFormValues: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.create(activityFormValues);\r\n            const newActivity = new Activity(activityFormValues);\r\n            const user = store.userStore.user;\r\n            const attendee = new Profile(user!)\r\n            newActivity.hostUserName = user!.userName;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activityFormValues: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.put(activityFormValues);\r\n            runInAction(() => {\r\n                if(activityFormValues.id) {\r\n                    const updatedActivity = {...this.getActivity(activityFormValues.id), ...activityFormValues} as Activity;\r\n                    this.activitiesRegestry.set(activityFormValues.id, updatedActivity);\r\n                    this.selectedActivity = updatedActivity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    attend = async () => {\r\n        const user = store.userStore.user;\r\n        try{\r\n            this.loading = true;\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if(this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(x => x.userName !== user?.userName);\r\n                    this.selectedActivity!.isGoing = false;}\r\n                else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n        finally{\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activitiesRegestry.delete(id);\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    toggleActivityCanceled = async () => {\r\n        this.loading = true;\r\n        try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            this.selectedActivity!.isCanceled = !this.selectedActivity!.isCanceled;\r\n            this.activitiesRegestry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n        }catch(error){\r\n            console.log(error);\r\n            }finally{\r\n            runInAction(() => {this.loading = false;})\r\n        }\r\n    }\r\n\r\n    clearSeectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFolowing = (userName: string) => {\r\n        this.activitiesRegestry.forEach(a => \r\n           { a.attendees.forEach(attendee => {\r\n                if(attendee.userName === userName) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following\r\n                }\r\n            })})\r\n    }\r\n\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/ActivityAttendee\";\r\nimport { ProfilesAboutFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile: boolean = false;\r\n    uploading: boolean = false;\r\n    loading: boolean = false;\r\n    followings: Profile[] = []\r\n    loadingFollowings: boolean = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n        reaction(() => this.activeTab, activeTab => {\r\n            if (activeTab === 3 || activeTab === 4) {\r\n                const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                this.loadFollowing(predicate)\r\n            }\r\n            else {\r\n                this.followings = [];\r\n            }\r\n        })\r\n    }\r\n\r\n    loadUserActivities = async (userName: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const acticvities = await agent.Profiles.listActivities(userName, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = acticvities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => { this.loadingActivities = false; })\r\n        }\r\n    }\r\n\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile)\r\n            return store.userStore.user.userName === this.profile.userName;\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (userName: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(userName);\r\n            runInAction(() => this.profile = profile)\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => { this.loadingProfile = false })\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.uploading = false)\r\n        }\r\n    }\r\n\r\n    setMianPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id == photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => { this.loading = false; })\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletPhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(x => x.id !== photo.id);\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => { this.loading = false; })\r\n        }\r\n    }\r\n\r\n    updateDetails = async (data: ProfilesAboutFormValues) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateDetails(data);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.bio = data.bio;\r\n                    this.profile.displayName = data.displayName;\r\n                    store.userStore.setDisplayName(data.displayName);\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => { this.loading = false; })\r\n        }\r\n    }\r\n\r\n    updateFolowing = async (userName: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.udateFolowing(userName);\r\n            store.activityStore.updateAttendeeFolowing(userName);\r\n            runInAction(() => {\r\n                if (this.profile\r\n                    && this.profile.userName !== store.userStore.user?.userName\r\n                    && this.profile.userName === userName) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.userName === store.userStore.user?.userName) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(f => {\r\n                    if (f.userName === userName) {\r\n                        f.following ? f.followersCount-- : f.followersCount++;\r\n                        f.following = !f.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    loadFollowing = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const follwings = await agent.Profiles.listFollowings(this.profile!.userName, predicate);\r\n            runInAction(() => {\r\n                this.followings = follwings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false)\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport User, { UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    logIn = async (user: UserFormValues) => {\r\n        try {\r\n            const logedInUser =  await agent.Account.login(user)\r\n            store.commonStore.setJwt(logedInUser.token);\r\n            runInAction(()=> this.user = logedInUser)\r\n            history.push('/activities')\r\n            store.modalStore.closeModal()\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    register = async (user: UserFormValues) => {\r\n        try {\r\n            const logedInUser =  await agent.Account.register(user)\r\n            store.commonStore.setJwt(logedInUser.token);\r\n            runInAction(()=> this.user = logedInUser)\r\n            history.push('/activities')\r\n            store.modalStore.closeModal()\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        this.user = null;\r\n        store.commonStore.setJwt(null)\r\n        window.localStorage.removeItem('jwt');\r\n        history.push('/');\r\n    }\r\n    \r\n    setImage = (image: string) => {\r\n        if(this.user)\r\n            this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (displayName: string) => {\r\n        if(this.user)\r\n            this.user.displayName = displayName;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore,\r\n    modalStore: ModalStore,\r\n    profileStore: ProfileStore,\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { ServerError } from \"../models/ServerError\";\r\nimport {makeAutoObservable, reaction} from \"mobx\"\r\nimport agent from \"../api/agent\";\r\nimport { idText } from \"typescript\";\r\n\r\nexport default class CommonStore {\r\n     error: ServerError | null = null\r\n     jwt: string | null = window.localStorage.getItem('jwt')\r\n     appLoadet: boolean = false;\r\n\r\n     constructor() {\r\n          makeAutoObservable(this)\r\n          reaction( \r\n               () => this.jwt,\r\n               token => {\r\n                    if(token)\r\n                         window.localStorage.setItem('jwt', token);\r\n                    else\r\n                         window.localStorage.removeItem('jwt')\r\n               })\r\n     }\r\n\r\n     setServerError = (error: ServerError) => {\r\n          this.error = error;\r\n     }\r\n\r\n     setJwt =( jwt: string | null) => {\r\n          this.jwt = jwt;\r\n     }\r\n\r\n     setAppLoaded = () => {\r\n          this.appLoadet = true;\r\n     }\r\n}","import { makeAutoObservable } from \"mobx\";\r\nimport { JsxElement } from \"typescript\";\r\n\r\ninterface Modal {\r\n    open: boolean,\r\n    content: JSX.Element | null\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {open : false, content: null}\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.content = content;\r\n    }\r\n\r\n    closeModal = () =>{\r\n        this.modal.open = false;\r\n        this.modal.content = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if(store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl( process.env.REACT_APP_CHAT_URL+'?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establlishing connection', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[])=>{\r\n                runInAction(() => {\r\n                    comments.forEach(comment => comment.createdAt =new Date(comment.createdAt+'Z'))\r\n                    this.comments = comments});\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)});\r\n            });\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () =>  {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection', error))\r\n    }\r\n\r\n    clearComment = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async(values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        }catch(error){\r\n            console.log(error)\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../stores/store'\r\n\r\nexport default observer( function NavBar() {\r\n    const {userStore: {user, logout}} = useStore()\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                Reactivities\r\n            </Menu.Item>\r\n            <Menu.Item name=\"Activities\" as={NavLink} to='/activities'/>\r\n            <Menu.Item name=\"Errors\" as={NavLink} to='/errors'/>\r\n            <Menu.Item >\r\n                <Button\r\n                    positive\r\n                    content='Create reactivity'\r\n                    as={NavLink} to='/createActivity' />\r\n            </Menu.Item>\r\n            <Menu.Item position='right'>\r\n                <Image src={user?.image || '/assets/user.png'} avatar spaced='right'/>\r\n                <Dropdown pointing='top left' text={user?.displayName}>\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='My profile'/>\r\n                        <Dropdown.Item onClick={logout} text = 'Logout' icon='power'/>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import React from 'react'\r\nimport { useField } from 'formik'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    name: string;\r\n    placeholder: string;\r\n    label?: string;\r\n    type?: string\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...props} {...field}/>\r\n            {(meta.touched && !!meta.error) \r\n                ?(<Label basic color='red'>{meta.error}</Label>)\r\n                :null }\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport MyTextInput from '../../common/form/MyTextInput'\r\nimport { useStore } from '../../stores/store'\r\n\r\nexport default observer(function LoginForm() {\r\n\r\n    const store = useStore()\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: '' }}\r\n            onSubmit={(data,{setErrors}) => store.userStore.logIn(data).catch(error=> setErrors({error: 'Invalid email or password'}))}>\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form'\r\n                    onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content = 'Log in to reactivities'/>\r\n                    <MyTextInput name='email' placeholder='email' />\r\n                    <MyTextInput name='password' placeholder='password' type='password' />\r\n                    <ErrorMessage name='error' render={()=> <Label basic color='red' style={{marginBotom: 20 }} content={errors.error} />} />\r\n                    <Button loading={isSubmitting} positive fluid type='submit' content='Login'/>\r\n                </Form>)}\r\n        </Formik>\r\n    )\r\n})","import React from 'react'\r\nimport { Label, Message } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationError({errors}: Props) {\r\n    return(\r\n        \r\n        <Message negative >\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}\r\n","import { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport MyTextInput from '../../common/form/MyTextInput'\r\nimport { useStore } from '../../stores/store'\r\nimport * as Yup from 'yup'\r\nimport ValidationError from '../errors/ValidationErrors'\r\n\r\n\r\nexport default observer(function RegisterForm() {\r\n\r\n    const store = useStore()\r\n    return (\r\n        <Formik\r\n            initialValues={{ userName: '', displayName:'', email: '', password: '', backendValidationErrors: '' }}\r\n            onSubmit={(data,{setErrors}) => store.userStore.register(data).catch(errorResponce => setErrors({backendValidationErrors: errorResponce}))}\r\n            validationSchema={Yup.object({\r\n                userName: Yup.string().required(),\r\n                displayName: Yup.string().required(),\r\n                email: Yup.string().required(),\r\n                password: Yup.string().required(),\r\n            })}>\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form'\r\n                    onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content = 'Sign up to reactivities'/>\r\n                    <MyTextInput name='userName' placeholder='User name' />\r\n                    <MyTextInput name='displayName' placeholder='Display name' />\r\n                    <MyTextInput name='email' placeholder='email' />\r\n                    <MyTextInput name='password' placeholder='password' type='password' />\r\n                    <ErrorMessage name='backendValidationErrors' render={()=> \r\n                        <ValidationError errors={errors.backendValidationErrors}/> }\r\n                    />\r\n                    <Button disabled={isSubmitting || !isValid || !dirty} loading={isSubmitting} positive fluid type='submit' content='Register'/>\r\n                </Form>)}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react'\r\nimport { useStore } from '../../stores/store'\r\nimport LoginForm from '../user/LoginForm'\r\nimport RegisterForm from '../user/RegisterForm'\r\n\r\nexport default observer( function HomePage(){\r\n    const {userStore, modalStore} = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBotom: 12}}/>\r\n                    Reactivities\r\n                </Header>\r\n                {\r\n                    userStore.isLoggedIn\r\n                    ? <>\r\n                        <Header as='h2' inverted content='Welcome to reactivities'/>\r\n\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to activies\r\n                        </Button>\r\n                    </>\r\n                    : \r\n                    <>\r\n                        <Button positive onClick={() => modalStore.openModal(<LoginForm/>)}>\r\n                            Login\r\n                        </Button>\r\n                        <Button  onClick={() => modalStore.openModal(<RegisterForm/>)}>\r\n                            Register\r\n                        </Button>\r\n                    </>\r\n                }\r\n                \r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import { observe } from 'mobx';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react'\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../models/ActivityAttendee';\r\nimport { useStore } from '../../stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFolowing, loading} = profileStore;\r\n\r\n    if(userStore.user?.userName === profile.userName)\r\n        return null;\r\n\r\n    function handleFollow(e:SyntheticEvent, userName: string){\r\n        e.preventDefault();\r\n        profile.following? updateFolowing(userName, false) : updateFolowing(userName, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button fluid color='teal' content={profile.following? 'Following': 'Not following'} />\r\n            </Reveal.Content>\r\n\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    basic\r\n                    fluid\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e)=> handleFollow(e, profile.userName)} />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport { Profile } from '../../models/ActivityAttendee'\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default function ProfileCard({profile}: Props)\r\n{\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Card as={Link} to={`/profiles/${profile.userName}`}>\r\n            <Image src ={profile.image || '/assets/user.png'}/>\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user'/>\r\n                    {profile.followersCount} folowers\r\n            </Card.Content>\r\n            <FollowButton profile={profile}/>\r\n        </Card>\r\n    )\r\n}","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { List, Image, Popup } from 'semantic-ui-react'\r\nimport { Profile } from '../../../models/ActivityAttendee'\r\nimport ProfileCard from '../../profiles/ProfileCard'\r\n\r\ninterface Props {\r\n    attendees: Profile[]\r\n}\r\n\r\nexport default observer(function ActivityListItemAttende({attendees}: Props) {\r\n\r\n    const styles = {\r\n        borderColor:'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (<List horizontal >\r\n        {\r\n            attendees.map( x => (\r\n                <Popup hoverable\r\n                    key = {x.userName}\r\n                    trigger={<List.Item key={x.userName} as={Link} to={`/profiles/${x.userName}`} >\r\n                    <Image \r\n                    size='mini' \r\n                    circular src={x.image ||'/assets/user.png'} \r\n                    bordered\r\n                    style={x.following ? styles:null}/>\r\n                </List.Item>}\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={x}/>\r\n                    </Popup.Content>\r\n                </Popup>\r\n                ))\r\n        }\r\n    </List>)\r\n})","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react'\r\nimport { Activity } from '../../../models/activity'\r\nimport {format} from 'date-fns'\r\nimport ActivivtyListItemAttendee from './ActivivtyListItemAttendee'\r\ninterface Props {\r\n    act: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ act }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {act.isCanceled && \r\n                    <Label\r\n                        attached='top'\r\n                        color='red'\r\n                        content='Canceled'\r\n                        style={{textAlign: 'center'}}\r\n                    />}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image stile={{marginBotom: 3}} size='tiny' circular src={ act.host?.image || 'assets/user.png'} />\r\n                    </Item>\r\n                    <Item.Content>\r\n                        <Item.Header as={Link} to={`/activity/${act.id}`}>\r\n                            {act.title}\r\n                        </Item.Header>\r\n                        <Item.Description>\r\n                            Hosted by <Link to={`/profiles/${act.host?.userName}`}>{act.host?.displayName} </Link> \r\n                        </Item.Description>\r\n                        {act.isHost && (<Item.Description><Label basic color='orange' content='You are hosting this activity'/></Item.Description>)}\r\n                        {act.isGoing && !act.isHost && (<Item.Description><Label basic color='green' content='You are going to this activity'/></Item.Description>)}\r\n                    </Item.Content>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' />{format( act.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {act.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivivtyListItemAttendee attendees={act.attendees!}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{act.description}</span>\r\n                <Button as={Link}\r\n                    to={`/activity/${act.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View' />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import React, { Fragment } from 'react'\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../stores/store';\r\nimport { observer } from 'mobx-react-lite'\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActityList() {\r\n\r\n    const { activityStore } = useStore()\r\n    const { activitiesGroupedByDate } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {activitiesGroupedByDate().map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(act =>\r\n                        <ActivityListItem key={act.id} act={act} />)\r\n                    }\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../../../stores/store'\r\n\r\nexport default observer( function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n\r\n\r\n    return (<>\r\n        <Menu vertical size='large' style={{ width: \"100%\", marginTop: 25 }}>\r\n            <Header icon='filter' attached color='teal' content='Filters' />\r\n            <Menu.Item content='All Activities' \r\n                active={predicate.has('all')}\r\n                onClick={() => setPredicate('all', 'true')}/>\r\n            <Menu.Item content='I`m going'\r\n                active={predicate.has('isGoing')}\r\n                onClick={() => setPredicate('isGoing', 'true')}/>\r\n            <Menu.Item content='I`m hosting' \r\n                active={predicate.has('isHost')}\r\n                onClick={() => setPredicate('isHost', 'true')}/>\r\n        </Menu>\r\n        <Header />\r\n        <Calendar \r\n            onChange={(date) => {setPredicate('startDate', date as Date)}}\r\n            value={predicate.get('startDate') || new Date()}/>\r\n    </>)\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../stores/store';\r\nimport ActityList from './ActivityLits';\r\nimport { observer } from 'mobx-react-lite'\r\nimport LoadingComponent from '../../../layout/LoadingComponent';\r\nimport ActivityFilters from './ActivityFilter';\r\nimport { PagingParams } from '../../../models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore()\r\n    const { loadActivities, activitiesRegestry, loadingInitial, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activitiesRegestry.size <= 1)\r\n            loadActivities()\r\n    }, [activitiesRegestry.size, loadActivities]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (<InfiniteScroll\r\n                    pageStart={0}\r\n                    loadMore={handleGetNext}\r\n                    hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                    initialLoad={false}>\r\n                    <ActityList />\r\n                </InfiniteScroll>)}\r\n\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    inverted?: boolean,\r\n    content?: string\r\n}\r\n\r\nexport default function LoadingComponent({inverted = false, content = 'Loading ...' }:Props)\r\n{\r\n    return (\r\n    <Dimmer active={true} inverted={inverted}>\r\n        <Loader content ={content}/>\r\n    </Dimmer>)\r\n}","import React from 'react'\r\nimport { useField } from 'formik'\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    name: string;\r\n    placeholder: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...props} {...field}/>\r\n            {(meta.touched && !!meta.error) \r\n                ?(<Label basic color='red'>{meta.error}</Label>)\r\n                :null }\r\n        </Form.Field>\r\n    )\r\n}","import React from 'react'\r\nimport { useField } from 'formik'\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    name: string;\r\n    placeholder: string;\r\n    label?: string;\r\n    options: any\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable \r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d)=> helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}/>\r\n            {(meta.touched && !!meta.error) \r\n                ?(<Label basic color='red'>{meta.error}</Label>)\r\n                :null }\r\n        </Form.Field>\r\n    )\r\n}","export const categroyOptions = [\r\n    {text: 'Drinks', value:'drinks'},\r\n    {text: 'Culture', value:'culture'},\r\n    {text: 'Film', value:'film'},\r\n    {text: 'Food', value:'food'},\r\n    {text: 'Music', value:'music'},\r\n    {text: 'Travel', value:'travel'}\r\n]","import React from 'react'\r\nimport { useField } from 'formik'\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport ReactDatePicker, {ReactDatePickerProps} from 'react-datepicker'\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <ReactDatePicker\r\n                {...field}\r\n                {... props}\r\n                selected={field.value && new Date(field.value) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n                />\r\n            {(meta.touched && !!meta.error) \r\n                ?(<Label basic color='red'>{meta.error}</Label>)\r\n                :null }\r\n        </Form.Field>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Button, Segment } from 'semantic-ui-react'\r\nimport { useStore } from '../../../../stores/store';\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { ActivityFormValues } from '../../../../models/activity';\r\nimport LoadingComponent from '../../../../layout/LoadingComponent';\r\nimport { v4 as uuid } from 'uuid'\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup'\r\nimport MyTextInput from '../../../../common/form/MyTextInput';\r\nimport MyTextArea from '../../../../common/form/MyTextArea';\r\nimport MySelectInput from '../../../../common/form/MySelectInput';\r\nimport { categroyOptions } from '../../../../common/form/options/category';\r\nimport MyDateInput from '../../../../common/form/MyDatePicker';\r\n\r\nexport default observer( function ActivityForm() {\r\n\r\n    const {activityStore} = useStore();\r\n    const history = useHistory();\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues())\r\n    const {id} = useParams<{id: string}>()\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() =>{\r\n        if(id){activityStore.loadActivity(id).then(act => setActivity(new ActivityFormValues(act)));}\r\n    }, [id, activityStore.loadActivity])\r\n\r\n    async function onFormSubmit(activity: ActivityFormValues) {\r\n        if(!activity.id)\r\n        {\r\n            activity.id = uuid();\r\n            await activityStore.createActivity(activity)\r\n            history.push(`/activity/${activity.id}`)\r\n        }\r\n        else\r\n        {\r\n            await activityStore.updateActivity(activity)\r\n            history.push(`/activity/${activity.id}`)\r\n        }\r\n    }\r\n\r\n    if(activityStore.loadingInitial)\r\n        return <LoadingComponent content='Loading activity...'/>\r\n    return (\r\n        <Segment clearing>\r\n            <Formik \r\n            enableReinitialize \r\n            initialValues={activity} \r\n            onSubmit={values => onFormSubmit(values)} \r\n            validationSchema={validationSchema}>\r\n                {({handleSubmit, isSubmitting, isValid, dirty}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n\r\n                        <MyTextInput placeholder='Title' name='title' />\r\n                        <MyTextArea rows={3} placeholder=\"Description\"  name=\"description\"/>\r\n                        <MySelectInput options={categroyOptions} placeholder=\"Category\" name=\"category\"/>\r\n                        <MyDateInput \r\n                            placeholderText=\"Date\" \r\n                            name=\"date\"\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa' />\r\n                        <MyTextInput placeholder=\"City\" name=\"city\" />\r\n                        <MyTextInput placeholder=\"Venue\" name=\"venue\" />\r\n                        <Button\r\n                            disabled = {isSubmitting || !isValid || !dirty}\r\n                            floated='right'\r\n                            positive\r\n                            type='submit'\r\n                            content='Submit' \r\n                            loading={isSubmitting}/>\r\n                        <Button\r\n                            floated='right'\r\n                            type='submit'\r\n                            content='Cancel'/>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from '../../../../models/activity';\r\nimport { format } from 'date-fns'\r\nimport { useStore } from '../../../../stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n\r\n    const { activityStore: { attend, loading, toggleActivityCanceled } } = useStore()\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCanceled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }} ribbon color='red' content='Canceled' />}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.userName}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ?\r\n                    (\r\n                        <>\r\n                            <Button\r\n                                color={activity.isCanceled? 'green' : 'red'}\r\n                                floated='left'\r\n                                basic\r\n                                content={activity.isCanceled? 'Re-activate Activity': 'Cancel Activity'}\r\n                                onClick={toggleActivityCanceled}\r\n                                loading={loading}\r\n                            />\r\n                            <Button as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\r\n                                Manage Event\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                    : activity.isGoing\r\n                        ? (<Button onClick={attend} loading={loading}>Cancel attendance</Button>)\r\n                        : (<Button color='teal' onClick={attend} loading={loading}>Join Activity</Button>)\r\n                }\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { Activity } from '../../../../models/activity';\r\nimport {format} from 'date-fns'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Button, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../../stores/store'\r\nimport * as Yup from 'yup'\r\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow'\r\n\r\ninterface Props {\r\n    activityId: string\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n\r\n\r\n    const { commentStore } = useStore();\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComment();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({ body: Yup.string().required() })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n\r\n                </Formik>\r\n\r\n                <Comment.Group>\r\n                    {commentStore.comments.map((x) =>\r\n                    (<Comment key={x.id}>\r\n                        <Comment.Avatar src={x.image || '/assets/user.png'} />\r\n                        <Comment.Content>\r\n                            <Comment.Author as={Link} to={`/profiles/${x.userName}`}>{x.displayName}</Comment.Author>\r\n                            <Comment.Metadata>\r\n                                <div>{formatDistanceToNow(x.createdAt)} ago</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{x.body}</Comment.Text>\r\n                        </Comment.Content>\r\n                    </Comment>)\r\n                    )}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../../models/activity'\r\n\r\ninterface Props {\r\n    activity : Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host} }:Props) {\r\n    if(!attendees)\r\n        return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 0 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(a => (\r\n                        <Item style={{ position: 'relative' }} key={a.userName}>\r\n                            {a.userName === host?.userName &&\r\n                                (<Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'>\r\n                                    Host\r\n                                </Label>)}\r\n                            \r\n                            <Image size='tiny' src={a.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${a.userName}`}>{a.displayName}</Link>\r\n                                </Item.Header>\r\n                                {a.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../../../layout/LoadingComponent';\r\nimport { useStore } from '../../../../stores/store'\r\nimport { observer } from 'mobx-react-lite'\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedChat from './ActivityDeatailedChat';\r\nimport ActivityDetailedSidebar from './ActiviytyDeatailedSidebar';\r\n\r\nexport default observer(function ActivityDetails() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { id } = useParams<{ id: string }>();\r\n    const { selectedActivity: activity, loadingInitial, clearSeectedActivity } = activityStore;\r\n\r\n    useEffect(() => { \r\n        activityStore.loadActivity(id); \r\n        return () => clearSeectedActivity();\r\n    }, [id, activityStore.loadActivity, clearSeectedActivity])\r\n\r\n\r\n\r\n    if (!activity || loadingInitial)\r\n        return <LoadingComponent />\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity}/>\r\n                <ActivityDetailedInfo activity={activity}/>\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationError from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n                {\r\n                    errors && \r\n                    <ValidationError errors={errors}/>\r\n                }\r\n            </Segment>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\r\n\r\nexport default function NotFound(){\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search'/>\r\n                Oops - we`ve looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )    \r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\n\r\nexport default observer( function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return(\r\n        <Container>\r\n            <Header as='h1'content='Server Error' ></Header>\r\n            <Header sub ad='h5' color='red' content={commonStore.error?.message}/>\r\n            {commonStore.error?.details && \r\n              <Segment>\r\n                <Header as='h4' content='Stack trace' color='teal' /> \r\n                <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n               </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Modal } from 'semantic-ui-react'\r\nimport { useStore } from '../../../stores/store'\r\n\r\nexport default observer(function ModalContainer () {\r\n    const {modalStore} = useStore()\r\n\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.content}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Profile } from \"./ActivityAttendee\";\r\n\r\nexport default interface User \r\n{\r\n    userName: string,\r\n    displayName: string,\r\n    token: string,\r\n    email: string,\r\n    image?: string\r\n}\r\n\r\nexport interface UserFormValues\r\n{\r\n    email: string,\r\n    password: string,\r\n    displayName?: string,\r\n    userName?: string\r\n}\r\n\r\nexport interface ProfilesAboutFormValues {\r\n    displayName: string;\r\n    bio?: string\r\n}\r\n\r\nexport class ProfilesAboutFormValues implements ProfilesAboutFormValues{\r\n\r\n    displayName: string = '';\r\n    bio? : string ='';\r\n    constructor(profile?: Profile){\r\n        if(!profile)\r\n            return;\r\n        this.bio = profile.bio || '';\r\n        this.displayName = profile.displayName;\r\n    }\r\n}","import { Form, Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport MyTextArea from '../../common/form/MyTextArea';\r\nimport MyTextInput from '../../common/form/MyTextInput';\r\nimport * as Yup from 'yup'\r\nimport { Profile } from '../../models/ActivityAttendee';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../stores/store';\r\nimport { ProfilesAboutFormValues } from '../../models/user';\r\n\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileAbout({ profile }: Props) {\r\n\r\n    const { profileStore: { isCurrentUser, updateDetails } } = useStore()\r\n    const [isInEditMode, setIsInEditMode] = useState(false);\r\n    const [formValues, setFormValues] = useState<ProfilesAboutFormValues>(new ProfilesAboutFormValues(profile))\r\n\r\n    async function handleFormSubmit(data: ProfilesAboutFormValues){\r\n        await updateDetails(data);\r\n        setFormValues(data)\r\n        setIsInEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={`About ${profile.displayName}`} />\r\n                    {isCurrentUser && (<Button\r\n                        floated='right'\r\n                        basic\r\n                        content={isInEditMode ? 'Cancel' : 'Edit'}\r\n                        onClick={() => setIsInEditMode(!isInEditMode)}\r\n                    />)}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {isInEditMode \r\n                    ? (\r\n                        <Formik\r\n                            initialValues={formValues}\r\n                            onSubmit={(data) => handleFormSubmit(data)}\r\n                            validationSchema={Yup.object({ displayName: Yup.string().required() , bio: Yup.string()})}>\r\n                            {\r\n                                ({ handleSubmit, isSubmitting, isValid, dirty }) => (\r\n                                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n\r\n                                        <MyTextInput placeholder='Display name' name='displayName' />\r\n                                        <MyTextArea rows={3} placeholder=\"Add your bio\" name=\"bio\" />\r\n                                        <Button\r\n                                            disabled={isSubmitting || !isValid || !dirty}\r\n                                            floated='right'\r\n                                            positive\r\n                                            type='submit'\r\n                                            content='Update profile'\r\n                                            loading={isSubmitting} />\r\n                                    </Form>)}\r\n                        </Formik>\r\n                    )\r\n                :(<span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>)}\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n        </Tab.Pane>);\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, Header, Image, Tab, TabProps } from 'semantic-ui-react';\r\nimport { UserActivity } from '../../models/ActivityAttendee';\r\nimport { useStore } from '../../stores/store'\r\nimport {format} from 'date-fns'\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } },\r\n]\r\n\r\nexport default observer(function ProfileActivities() {\r\n\r\n    const { profileStore } = useStore();\r\n\r\n    const { loadUserActivities, profile, loadingActivities, userActivities } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.userName);\r\n    }, [loadUserActivities, profile])\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.userName, panes[data.activeIndex as number].pane.key)\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((a: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${a.id}`}\r\n                                key={a.id}>\r\n                                <Image src={`/assets/categoryImages/${a.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }} />\r\n\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{a.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div> {format(new Date(a.date), 'do LLL')}</div>\r\n                                        <div> {format(new Date(a.date), 'h:m a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store'\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n    \r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={ activeTab === 3? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(x => {\r\n                            return <ProfileCard key={x.userName} profile={x} />\r\n                        })}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import Rect from 'react'\r\nimport { Cropper } from 'react-cropper'\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props{\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props){\r\n    return(<Cropper\r\n        src={imagePreview}\r\n        style={{height:200, width:'100%'}}\r\n        initialAspectRatio={1}\r\n        aspectRatio={1}\r\n        preview='.img-preview'\r\n        guides={false}\r\n        viewMode={1}\r\n        autoCropArea={1}\r\n        background={false}\r\n        onInitialized={cropper => setCropper(cropper)}\r\n        />)\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive ={\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {preview: URL.createObjectURL(file)})))\r\n    }, [setFiles])\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n\r\n        <div {...getRootProps()} style={isDragActive? {...dzStyles, ...dzActive}: dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size ='huge' />\r\n            <Header content='Drop image here'/>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Button, Grid, Header, Image } from 'semantic-ui-react'\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\r\n\r\ninterface Props{\r\n    loading: boolean,\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => {\r\n                URL.revokeObjectURL(file.previe)\r\n            });\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 1 - Add photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 3 - Previe & upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button onClick={onCrop} loading={loading} positive icon='check' />\r\n                            <Button onClick={() => setFiles([])} icon='close' disabled={loading} />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite'\r\nimport React, { SyntheticEvent, useState } from 'react'\r\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react'\r\nimport PhotoUploadWidget from '../../common/ImageUpload/PhotoUploadWidget'\r\nimport { Photo, Profile } from '../../models/ActivityAttendee'\r\nimport { useStore } from '../../stores/store'\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, \r\n        loading, setMianPhoto, deletePhoto} } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('')\r\n\r\n    function handleSetMainPhoto(photo: Photo, e : SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        setMianPhoto(photo);\r\n    }\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false))\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e : SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (<Button\r\n                        floated='right'\r\n                        basic\r\n                        content={addPhotoMode ? 'Cancel' : 'Add photo'}\r\n                        onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                    />)}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\r\n                    ) :\r\n                        (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile.photos?.map(x => (<Card key={x.id}><Image src={x.url} />\r\n                                {isCurrentUser && (<Button.Group fluid widths={2}>\r\n                                    <Button\r\n                                        basic\r\n                                        color='green'\r\n                                        content='Main'\r\n                                        name={'main'+x.id}\r\n                                        disabled={x.isMain}\r\n                                        loading={target === 'main' + x.id && loading}\r\n                                        onClick={(e) => handleSetMainPhoto(x, e)}\r\n                                    />\r\n                                    <Button\r\n                                        basic\r\n                                        color='red'\r\n                                        icon='trash'\r\n                                        loading={target==x.id && loading}\r\n                                        onClick={(e)=> handleDeletePhoto(x, e)}\r\n                                        disabled = {x.isMain}\r\n                                        name={x.id}\r\n                                    />\r\n                                </Button.Group>)}\r\n                                </Card>))}\r\n                            </Card.Group>)\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Tab } from 'semantic-ui-react'\r\nimport { Profile } from '../../models/ActivityAttendee'\r\nimport { useStore } from '../../stores/store'\r\nimport ProfileAbout from './ProfileAbout'\r\nimport ProfileAcitivities from './ProfileAcitivities'\r\nimport ProfileFollowings from './ProfileFollowings'\r\nimport ProfilePhotos from './ProfilePhotos'\r\n\r\ninterface Props{\r\n    profile: Profile\r\n}\r\n\r\nexport default observer( function ProfileContent({profile}:Props){\r\n    \r\n    const {profileStore} = useStore()\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout profile={profile}/>},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileAcitivities />},\r\n        {menuItem: 'Folowers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Folowing', render: () => <ProfileFollowings />},\r\n    ]    \r\n    return(\r\n        <Tab menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Divider, Grid, Header, Item, Reveal, Segment, Statistic } from 'semantic-ui-react'\r\nimport { Profile } from '../../models/ActivityAttendee'\r\nimport FollowButton from './FollowButton'\r\n\r\ninterface Props{\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Folowers' value={profile.followersCount} />\r\n                        <Statistic label='Folowing' value= {profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { keys } from 'mobx'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport LoadingComponent from '../../layout/LoadingComponent'\r\nimport { useStore } from '../../stores/store'\r\nimport ProfileContent from './ProfileContent'\r\nimport ProfileHeader from './ProfileHeader'\r\n\r\nexport default observer( function ProfilePage(){\r\n    const {userName} = useParams<{userName: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(userName);\r\n        return ()=>{setActiveTab(0)}\r\n    }, [loadProfile, userName])\r\n\r\n    if(loadingProfile)\r\n        return <LoadingComponent content='Loading profile...'/>\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile}/>\r\n                        <ProfileContent profile={profile}/>\r\n                    </>\r\n                }                \r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteChildrenProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteChildrenProps<any>> | React.ComponentType<any> ;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n\r\n    return (\r\n        <Route {...rest}\r\n        render={(props)=> isLoggedIn ? <Component {...props} /> : <Redirect to='/'/> }\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport HomePage from '../features/home/HomePage';\r\nimport ActivitiesDashbord from '../features/activities/dashbord/ActivitiesDashbord';\r\nimport ActivityForm from '../features/activities/dashbord/form/ActivityForm';\r\nimport ActivityDetails from '../features/activities/dashbord/details/ActivityDetails';\r\nimport TestErrors from '../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../features/errors/NotFound';\r\nimport ServerError from '../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/form/modals/ModalContainer'\r\nimport ProfilePage from '../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PriveRoute';\r\n\r\nfunction App() {\r\n\r\n  const location = useLocation()\r\n  const { commonStore, userStore } = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.jwt)\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded())\r\n    else  \r\n      commonStore.setAppLoaded();\r\n    } , [userStore, commonStore])\r\n\r\n  if(!commonStore.appLoadet)\r\n    return <LoadingComponent content='Loading app...'/>\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer/>\r\n      <Route path='/' exact component={HomePage} />\r\n      <Route path='/(.+)' render={() =>\r\n        <>\r\n          <NavBar />\r\n          <Container style={{ marginTop: '7em' }}>\r\n            <Switch>\r\n              <PrivateRoute path='/activities' exact component={ActivitiesDashbord} />\r\n              <PrivateRoute path='/activity/:id' exact component={ActivityDetails} />\r\n              <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n              <PrivateRoute path='/profiles/:userName' component={ProfilePage}/>\r\n              <PrivateRoute path='/errors' component={TestErrors} />\r\n              <Route path='/server-error' component={ServerError} />\r\n              <Route component={NotFound} />\r\n            </Switch>\r\n          </Container>\r\n        </>\r\n      } />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport 'react-toastify/dist/ReactToastify.min.css'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory} from 'history'\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <ScrollToTop/>\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>, document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}